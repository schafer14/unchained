package main

import (
	"fmt"
	dependencies "{{ .Module }}/dependencies"
	handlers "{{ .Module }}/fns"
	"context"
	"encoding/json"
	"net/http"

	"github.com/gorilla/mux"
	"go.uber.org/fx"
)

func main() {
	fmt.Println("Lifting off")

	{{ range $i, $t := .Handlers }}
	var handler{{ $i }} handlers.{{ $t.Name }}
	{{ end }}

	{{ range $i, $t := .Handlers }}
		{{ range $j, $m := $t.Fns }}
	handlerFn_{{$i}}_{{$m.Name}} := func(r *mux.Router) {
    var hf http.HandlerFunc =  func(w http.ResponseWriter, r *http.Request) {
      {{ if ne $m.BodyArg "" }}
			var body handlers.{{ $m.BodyArg }}
			err := json.NewDecoder(r.Body).Decode(&body)
			if err != nil {
				w.WriteHeader(http.StatusBadRequest)
				return
			}
      {{ end }}

      {{ if gt (len $m.UrlParams) 0 }}
        vars := mux.Vars(r)
      {{ end }}

      {{ range $i, $k := $m.UrlParams }}
        {{ $k }} := vars["{{ $k }}"]
      {{ end }}


      out, err := handler{{ $i }}.{{ $m.Name}}({{ $m.CallArgsStr }})
			if err != nil {
				w.WriteHeader(http.StatusInternalServerError)
				return
			}

			bytes, err := json.Marshal(out)
			if err != nil {
				w.WriteHeader(http.StatusInternalServerError)
				return
			}

			w.Write(bytes)
      }

      r.Handle("{{ $t.RoutingKey }}{{ $m.RoutingKey }}", hf){{ if ne $m.Method "" }}.Methods(http.Method{{ $m.Method }}){{ end }}
  }
		{{ end }}
	{{ end }}

	fx.New(
		{{ range $i, $f := .Deps }}
		fx.Provide(dependencies.{{ $f.Name }}),
		{{ end }}
		fx.Provide(NewRouter),
		{{ range $i, $t := .Handlers }}
		fx.Populate(&handler{{ $i }}),
		{{ range $j, $m := $t.Fns }}
		fx.Invoke(handlerFn_{{$i}}_{{$m.Name}}),
		{{ end }}
		{{ end }}
	).Run()
}

func NewRouter(lc fx.Lifecycle) *mux.Router {
	r := mux.NewRouter()

	server := &http.Server{
		Addr:    ":8080",
		Handler: r,
	}

	lc.Append(
		fx.Hook{
			OnStart: func(ctx context.Context) error {
				fmt.Println("Starting server on port 8080")
				go server.ListenAndServe()
				return nil
			},
			OnStop: func(ctx context.Context) error {
				return server.Shutdown(ctx)
			},
		},
	)

	return r
}
